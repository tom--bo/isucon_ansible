worker_processes  1;
user isucon;


worker_rlimit_nofile 8192;
#worker_rlimit_nofile 150000;
events {
    worker_connections  10000;
    #worker_connections  65535;
    multi_accept on;
    use epoll;
    accept_mutex_delay 100ms;

}
http {
    include       mime.types;
    default_type  application/octet-stream;
    log_format ltsv "time:$time_local"
        "\thost:$remote_addr"
        "\tforwardedfor:$http_x_forwarded_for"
        "\treq:$request"
        "\tmethod:$request_method"
        "\turi:$request_uri"
        "\tstatus:$status"
        "\tsize:$body_bytes_sent"
        "\treferer:$http_referer"
        "\tua:$http_user_agent"
        "\treqtime:$request_time"
        "\truntime:$upstream_http_x_runtime"
        "\tapptime:$upstream_response_time"
        "\tcache:$upstream_http_x_cache"
        "\tvhost:$host"
        ;
    access_log  /var/log/nginx/access.log ltsv;
    sendfile        on; #カーネル空間でファイルのIOを行う(仮想環境だとhuguaigaokiyasui)
    tcp_nopush     on;  #パケットをまとめてtcpパケットを減らす
    #keepalive_timeout  65;
    #server_tokens   off;
    #gzip  on;
    upstream app {
        keepalive 64;
        server 127.0.0.1:8080;
        #server unix:/tmp/go.sock;
    }
    server {
        client_max_body_size 1G;
        root /home/isucon/webapp/public;
        include /etc/nginx/mime.types;
        try_files $uri $uri/index.html @app;

        location @app {
          proxy_redirect          off;
          client_max_body_size    10m;
          client_body_buffer_size 128k;
          proxy_buffers           32 4k;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_pass http://app;
        }

        #クライアントに以下の拡張子のファイルをキャッシュするように指示する
        #キャッシュさせても毎回サーバに更新を確認に来させている
        # location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
        #    try_files $uri @app;
		#    open_file_cache max=100;
        #    expires max;
        #    add_header Pragma public;
        #    add_header Cache-Control "public, must-revalidate, proxy-revalidate";
        #    etag off;
        #  }

#       location /images{
#           root /tmp;
#           # Basic認証を行ってアクセスするには、以下のように設定します。
#           # auth_basic            "webdav";
#           # auth_basic_user_file  /var/www/password/webdav;
#           client_max_body_size   100m;
#           # 基本WebDAVモジュールで許可するメソッドを指定します。ここでは全てです。
#           dav_methods PUT DELETE MKCOL COPY MOVE;
#           # 拡張WebDAVモジュールで許可するメソッドを指定します。ここでは全てです。
#
#           autoindex on;
#           autoindex_exact_size off;
#           autoindex_localtime on;
#           # WebDAVでのアクセス権を設定します。
#           #     user:rw ユーザは読書可。group:r グループは読書可 all:r; 全てのアクセス者は読のみ可
#           dav_access user:rw group:rw all:r;
#           access_log /var/log/nginx/webdav.access.log;
#           error_log /var/log/nginx/webdav.error.log;
#
#           # WebDAVで使用する一時的なファイルを作成するディレクトリを設定します。
#           client_body_temp_path  /tmp/nginx/webdav;
#           # WebDAV(PUTメソッド)でディレクトリを作成できる権限を与えます。デフォルトでは作成(off)できません。
#           create_full_put_path on;
#       }

    }

}
